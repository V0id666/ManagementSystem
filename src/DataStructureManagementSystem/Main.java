package DataStructureManagementSystem;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        LinkedListManager listManager = new LinkedListManager();
        BST bst = new BST();
        UndoStack undoStack = new UndoStack();
        PriorityQueue pq = new PriorityQueue();

        System.out.println("üóÇÔ∏è==============================üóÇÔ∏è");
        System.out.println("   Welcome to System Management!  ");
        System.out.println("üóÇÔ∏è==============================üóÇÔ∏è");

        while (true) {
            System.out.println("üìã MENU:");
            System.out.println("1Ô∏è‚É£ Add Item");
            System.out.println("2Ô∏è‚É£ View Items");
            System.out.println("3Ô∏è‚É£ Update Item ‚úèÔ∏è");
            System.out.println("4Ô∏è‚É£ Delete Item üóëÔ∏è");
            System.out.println("5Ô∏è‚É£ Undo Last Deletion üîÅ");
            System.out.println("6Ô∏è‚É£ Search by ID (BST) üîç");
            System.out.println("7Ô∏è‚É£ Manage Priority Queue üì§");
            System.out.println("8Ô∏è‚É£ Save to File üíæ");
            System.out.println("9Ô∏è‚É£ Load from File üìÇ");
            System.out.println("üîü Exit üö™");
            System.out.print("Choose an option: ");
            int choice = sc.nextInt();
            sc.nextLine(); // consume newline

            switch (choice) {
                case 1 -> {
                    System.out.print("üÜî Enter ID: ");
                    int id = sc.nextInt(); sc.nextLine();
                    System.out.print("üìù Enter Name: ");
                    String name = sc.nextLine();
                    System.out.print("üìÑ Enter Description: ");
                    String desc = sc.nextLine();
                    System.out.print("üè∑Ô∏è Enter Category: ");
                    String cat = sc.nextLine();

                    Item item = new Item(id, name, desc, cat);
                    listManager.addItem(item);
                    bst.insert(item);
                    System.out.println("‚úÖ Item added successfully!");
                    System.out.println("-----------------------------------------------------------------------------");
                }

                case 2 -> {
                    System.out.println("\nüì¶ All Items:");
                    listManager.viewItems();
                    System.out.println("-----------------------------------------------------------------------------");
                }

                case 3 -> {
                    System.out.print("üîÅ Enter ID to update: ");
                    int id = sc.nextInt(); sc.nextLine();
                    System.out.print("‚úèÔ∏è New Name: ");
                    String name = sc.nextLine();
                    System.out.print("üÜï New Description: ");
                    String desc = sc.nextLine();
                    System.out.print("üÜï New Category: ");
                    String cat = sc.nextLine();
                    listManager.updateItem(id, name, desc, cat);
                    System.out.println("‚úÖ Item updated.");
                    System.out.println("-----------------------------------------------------------------------------");
                }

                case 4 -> {
                    System.out.print("üóëÔ∏è Enter ID to delete: ");
                    int id = sc.nextInt();
                    Item deleted = listManager.getItemById(id);
                    if (deleted != null && listManager.deleteItem(id)) {
                        undoStack.push(deleted);
                        System.out.println("üóÇÔ∏è Item deleted and pushed to undo stack.");
                        System.out.println("-------------------------------------------------------------------------");
                    } else {
                        System.out.println("‚ùå Item not found.");
                        System.out.println("-------------------------------------------------------------------------");
                    }
                }

                case 5 -> {
                    Item restored = undoStack.pop();
                    if (restored != null) {
                        listManager.addItem(restored);
                        System.out.println("üîÅ Undo complete. Item restored.");
                        System.out.println("-------------------------------------------------------------------------");
                    } else {
                        System.out.println("‚ö†Ô∏è Nothing to undo.");
                        System.out.println("-------------------------------------------------------------------------");
                    }
                }

                case 6 -> {
                    System.out.print("üîç Enter ID to search: ");
                    int id = sc.nextInt();
                    Item result = bst.search(id);
                    if (result != null) {
                        System.out.println("‚úÖ Item found:\n" + result);
                        System.out.println("-------------------------------------------------------------------------");
                    } else {
                        System.out.println("‚ùå Item not found.");
                        System.out.println("-------------------------------------------------------------------------");
                    }
                }

                case 7 -> {
                    System.out.print("üì¶ Enter ID: ");
                    int id = sc.nextInt(); sc.nextLine();
                    Item item = listManager.getItemById(id);
                    if (item != null) {
                        System.out.print("‚ö° Is this item urgent? (true/false): ");
                        boolean urgent = sc.nextBoolean();
                        pq.enqueue(item, urgent);
                        System.out.println("üì§ Item added to priority queue.");
                        System.out.println("-------------------------------------------------------------------------");
                    } else {
                        System.out.println("‚ùå Item not found.");
                        System.out.println("-------------------------------------------------------------------------");
                    }
                    pq.display();
                }

                case 8 -> {
                    try {
                        FileHandler.save(listManager);
                        System.out.println("üíæ Items saved to file successfully!");
                        System.out.println("-------------------------------------------------------------------------");
                    } catch (Exception e) {
                        System.out.println("‚ùå Save error: " + e.getMessage());
                        System.out.println("-------------------------------------------------------------------------");
                    }
                }

                case 9 -> {
                    try {
                        listManager = FileHandler.load();
                        System.out.println("üìÇ Items loaded from file.");
                        System.out.println("-------------------------------------------------------------------------");
                    } catch (Exception e) {
                        System.out.println("‚ùå Load error: " + e.getMessage());
                        System.out.println("-------------------------------------------------------------------------");
                    }
                }

                case 10 -> {
                    System.out.println("üëã Exiting... Have a great day!");
                    return;
                }

                default -> System.out.println("‚ö†Ô∏è Invalid option. Please try again.");
            }
        }
    }
}
